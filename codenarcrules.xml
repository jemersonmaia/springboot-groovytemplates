<ruleset xmlns="http://codenarc.org/ruleset/1.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://codenarc.org/ruleset/1.0 http://codenarc.org/ruleset-schema.xsd"
         xsi:noNamespaceSchemaLocation="http://codenarc.org/ruleset-schema.xsd">

    <description>
        Basic rule set.
        These rules are intended to be broadly (if not universally) applicable.
    </description>

    <rule class='org.codenarc.rule.basic.AssertWithinFinallyBlockRule'/>
    <rule class='org.codenarc.rule.basic.AssignmentInConditionalRule'/>
    <rule class='org.codenarc.rule.basic.BigDecimalInstantiationRule'/>
    <rule class='org.codenarc.rule.basic.BitwiseOperatorInConditionalRule'/>
    <rule class='org.codenarc.rule.basic.BooleanGetBooleanRule'/>
    <rule class='org.codenarc.rule.basic.BrokenNullCheckRule'/>
    <rule class='org.codenarc.rule.basic.BrokenOddnessCheckRule'/>
    <rule class='org.codenarc.rule.basic.ClassForNameRule'/>
    <rule class='org.codenarc.rule.basic.ComparisonOfTwoConstantsRule'/>
    <rule class='org.codenarc.rule.basic.ComparisonWithSelfRule'/>
    <rule class='org.codenarc.rule.basic.ConstantAssertExpressionRule'/>
    <rule class='org.codenarc.rule.basic.ConstantTernaryExpressionRule'/>
    <rule class='org.codenarc.rule.basic.ConstantIfExpressionRule'/>
    <rule class='org.codenarc.rule.basic.DeadCodeRule'/>
    <rule class='org.codenarc.rule.basic.DoubleNegativeRule'/>
    <rule class='org.codenarc.rule.basic.DuplicateCaseStatementRule'/>
    <rule class='org.codenarc.rule.basic.DuplicateMapKeyRule'/>
    <rule class='org.codenarc.rule.basic.DuplicateSetValueRule'/>
    <rule class='org.codenarc.rule.basic.EmptyCatchBlockRule'/>
    <rule class='org.codenarc.rule.basic.EmptyClassRule'/>
    <rule class='org.codenarc.rule.basic.EmptyElseBlockRule'/>
    <rule class='org.codenarc.rule.basic.EmptyFinallyBlockRule'/>
    <rule class='org.codenarc.rule.basic.EmptyForStatementRule'/>
    <rule class='org.codenarc.rule.basic.EmptyIfStatementRule'/>
    <rule class='org.codenarc.rule.basic.EmptySwitchStatementRule'/>
    <rule class='org.codenarc.rule.basic.EmptySynchronizedStatementRule'/>
    <rule class='org.codenarc.rule.basic.EmptyStaticInitializerRule'/>
    <rule class='org.codenarc.rule.basic.EmptyTryBlockRule'/>
    <rule class='org.codenarc.rule.basic.EmptyWhileStatementRule'/>
    <rule class='org.codenarc.rule.basic.EmptyInstanceInitializerRule'/>
    <rule class='org.codenarc.rule.basic.EmptyMethodRule'/>
    <rule class='org.codenarc.rule.basic.EqualsAndHashCodeRule'/>
    <rule class='org.codenarc.rule.basic.EqualsOverloadedRule'/>
    <rule class='org.codenarc.rule.basic.ExplicitGarbageCollectionRule'/>
    <rule class='org.codenarc.rule.basic.ForLoopShouldBeWhileLoopRule'/>
    <rule class='org.codenarc.rule.basic.HardCodedWindowsFileSeparatorRule'/>
    <rule class='org.codenarc.rule.basic.HardCodedWindowsRootDirectoryRule'/>
    <rule class='org.codenarc.rule.basic.IntegerGetIntegerRule'/>
    <rule class='org.codenarc.rule.basic.MultipleUnaryOperatorsRule'/>
    <rule class='org.codenarc.rule.basic.RandomDoubleCoercedToZeroRule'/>
    <rule class='org.codenarc.rule.basic.RemoveAllOnSelfRule'/>
    <rule class='org.codenarc.rule.basic.ReturnFromFinallyBlockRule'/>
    <rule class='org.codenarc.rule.basic.ThrowExceptionFromFinallyBlockRule'/>

    <!-- Braces Rules -->
    <rule class='org.codenarc.rule.braces.ElseBlockBracesRule'/>

    <!-- Imports Rules -->
    <rule class='org.codenarc.rule.imports.UnusedImportRule'/>
    <rule class='org.codenarc.rule.imports.NoWildcardImportsRule'/>
    <rule class='org.codenarc.rule.imports.UnnecessaryGroovyImportRule'/>
    <rule class='org.codenarc.rule.imports.DuplicateImportRule'/>

    <!-- Logging Rules -->
    <rule class='org.codenarc.rule.logging.PrintlnRule'/>
    <rule class='org.codenarc.rule.logging.PrintStackTraceRule'>
        <property name='violationMessage' value='Todo printStackTrace() deve ser substituído por algo mais robusto conforme [Boas práticas: Logs](https://github.com/asaasdev/livro-de-elite/blob/master/best-practices.md#logs).'/>
    </rule>

    <!-- Convention Rules -->
    <rule class='org.codenarc.rule.convention.ImplicitReturnStatementRule'/>
    <rule class='org.codenarc.rule.convention.PublicMethodsBeforeNonPublicMethodsRule'>
        <property name="doNotApplyToFilesMatching" value=".+/grails\\-app/domain/.+"></property>
        <property name='violationMessage' value='Métodos públicos devem preceder métodos privados conforme [Boas Práticas: Ordenação dos métodos públicos e privados](https://github.com/asaasdev/livro-de-elite/blob/master/best-practices.md#ordenacao-metodos)'/>
    </rule>
    <rule class='org.codenarc.rule.convention.StaticFieldsBeforeInstanceFieldsRule'>
        <property name="doNotApplyToFilesMatching" value=".+/grails\\-app/domain/.+"></property>
    </rule>
    <rule class='org.codenarc.rule.convention.NoDoubleRule'/>

    <!-- Grails Rules -->
    <rule class='org.codenarc.rule.grails.GrailsDomainWithServiceReferenceRule'>
        <property name='violationMessage' value='Não utilizamos injeções de service em classes de domínio, porque existem implicações de performance conforme [Boas Práticas: Por que não utilizamos injeção de dependências nas classes de domínio?](https://github.com/asaasdev/livro-de-elite/blob/master/best-practices.md#GrailsDomainWithServiceReferenceRule).'/>
    </rule>
    <rule class='org.codenarc.rule.grails.GrailsDuplicateConstraintRule'/>
    <rule class='org.codenarc.rule.grails.GrailsMassAssignmentRule'/>

    <!-- Formatting Rules -->
    <rule class='org.codenarc.rule.formatting.BracesForIfElseRule'/>
    <rule class='org.codenarc.rule.formatting.BlankLineBeforePackageRule'/>
    <rule class='org.codenarc.rule.formatting.BlockEndsWithBlankLineRule'/>
    <rule class='org.codenarc.rule.formatting.BlockStartsWithBlankLineRule'/>
    <rule class='org.codenarc.rule.formatting.SpaceAfterCatchRule'/>
    <rule class='org.codenarc.rule.formatting.SpaceAfterCommaRule'/>
    <rule class='org.codenarc.rule.formatting.SpaceAfterForRule'/>
    <rule class='org.codenarc.rule.formatting.SpaceAfterIfRule'/>
    <rule class='org.codenarc.rule.formatting.SpaceAfterOpeningBraceRule'/>
    <rule class='org.codenarc.rule.formatting.SpaceAfterSwitchRule'/>
    <rule class='org.codenarc.rule.formatting.SpaceBeforeClosingBraceRule'/>
    <rule class='org.codenarc.rule.formatting.SpaceBeforeOpeningBraceRule'/>
    <rule class='org.codenarc.rule.formatting.TrailingWhitespaceRule'/>
    <rule class='org.codenarc.rule.formatting.ConsecutiveBlankLinesRule'/>

    <!-- Groovyism Rules -->
    <rule class='org.codenarc.rule.groovyism.ExplicitArrayListInstantiationRule'/>
    <rule class='org.codenarc.rule.groovyism.GStringExpressionWithinStringRule'/>

    <!-- Naming Rules -->
    <rule class='org.codenarc.rule.naming.PackageNameRule'/>

    <!-- Unnecessary Rules -->
    <rule class='org.codenarc.rule.unnecessary.UnnecessaryDotClassRule'/>
    <rule class='org.codenarc.rule.unnecessary.UnnecessarySemicolonRule'/>
    <rule class='org.codenarc.rule.unnecessary.UnnecessaryDefInFieldDeclarationRule'/>
    <rule class='org.codenarc.rule.unnecessary.UnnecessaryDefInMethodDeclarationRule'/>
    <rule class='org.codenarc.rule.unnecessary.UnnecessaryInstanceOfCheckRule'/>

    <!-- Unused Rules -->
    <rule class='org.codenarc.rule.unused.UnusedMethodParameterRule'/>
    <rule class='org.codenarc.rule.unused.UnusedObjectRule'/>
    <rule class='org.codenarc.rule.unused.UnusedVariableRule'/>

    <!-- Security Rules -->
    <rule class='org.codenarc.rule.security.InsecureRandomRule'/>

    <!-- Avoid public methods on BaseController -->
    <rule class='org.codenarc.rule.generic.IllegalClassMemberRule'>
        <property name='allowedMethodModifiers' value='private,protected' />
        <property name='applyToClassNames' value='BaseController' />
    </rule>

    <rule class='org.codenarc.rule.generic.IllegalClassReferenceRule'>
        <property name='classNames' value='org.json.JSONArray,org.json.JSONObject'/>
        <property name='violationMessage' value='Não use classes do `org.json` quando pode usar classes do `org.codehaus.groovy.grails.web.json`, pois isso pode acontecer: #10901'/>
    </rule>

    <rule class='org.codenarc.rule.generic.IllegalRegexRule'>
        <property name='name' value='ForceHttps'/>
        <property name='regex' value='http:'/>
        <property name='violationMessage' value='Para maior segurança na chamada utilize HTTPS'/>
    </rule>

    <rule class='org.codenarc.rule.generic.IllegalRegexRule'>
        <property name='name' value='NoDirectThreads'/>
        <property name='regex' value='\bThread\b'/>
        <property name='violationMessage' value='Evite utilizar Threads, priorize o uso de tasks e Promises. Mais em nosso livro de elite: [Tasks e programação assíncrona](https://github.com/asaasdev/livro-de-elite/blob/master/best-practices.md#tasks).'/>
    </rule>

    <!-- Concurrency Rules -->
    <rule class='org.codenarc.rule.concurrency.StaticSimpleDateFormatFieldRule'/>
    <rule class='org.codenarc.rule.concurrency.StaticDateFormatFieldRule'/>
    <rule class='org.codenarc.rule.concurrency.StaticCalendarFieldRule'/>

</ruleset>
